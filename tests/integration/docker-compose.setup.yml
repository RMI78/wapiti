version: '3.9'

# Following the DRY philosophy
x-default_php_setup:
  &default_php_setup
  image: php${PHP_HASH}
  networks:
    - test-network

x-healthcheck_web:
  &healthcheck_web
  healthcheck:
    test: ${DEFAULT_WEB_HEALTHCHECK_COMMAND}
    interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
    timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
    start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    retries: ${DEFAULT_HEALTHCHECKS_RETRIES}

x-default_mysql_setup:
  &default_mysql_setup
  image: mysql${MYSQL_HASH}
  networks:
    - test-network

x-healthcheck_mysql:
  &healthcheck_mysql
  healthcheck:
    test: ${DEFAULT_MYSQL_HEALTHCHECK_COMMAND}
    start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
    timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
    retries: ${DEFAULT_HEALTHCHECKS_RETRIES}

services:
  # First, all the different databases required to run the containers
  wp_db:
    <<: [ *default_mysql_setup, *healthcheck_mysql ]
    volumes:
      - wp_db_data:/var/lib/mysql
      - ./test_mod_wp_enum/mock_wp_db.sql:/docker-entrypoint-initdb.d/mock_wp_db.sql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${WP_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WP_MYSQL_DATABASE}
      MYSQL_USER: ${WP_MYSQL_USER}
      MYSQL_PASSWORD: ${WP_MYSQL_PASSWORD}

  timesql-db:
    build:
      context: ./test_mod_timesql/
      dockerfile: Dockerfile.mysql
      args:
        - MYSQL_HASH_TAG=${MYSQL_HASH}
    environment:
      MYSQL_DATABASE: ${TIMESQL_MYSQL_DATABASE}
      MYSQL_USER: ${TIMESQL_MYSQL_USER}
      MYSQL_PASSWORD: ${TIMESQL_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${TIMESQL_MYSQL_ROOT_PASSWORD}
    <<: *healthcheck_mysql
    volumes:
      - timesql_db_data:/var/lib/mysql
    networks:
      - test-network

  # Apache server for the backup module
  backup:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_backup/html/:/var/www/html/

  # Apache container for the brute_login_form module
  brute_login_form:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_brute_login_form/php/src:/var/www/html/

  # Apache container for the crlf module
  crlf:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_crlf/php/src:/var/www/html/

  # Apache container for the exec module
  exec:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_exec/php/src:/var/www/html/

  # Apache container for the htaccess module
  htaccess:
    build:
      context: ./test_mod_htaccess/

      dockerfile: Dockerfile
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    volumes:
      - ./test_mod_htaccess/php/src:/var/www/html/
    networks:
      - test-network

  # Apache container for the http_headers module
  http_headers:
    build:
      context: ./test_mod_http_headers/
      dockerfile: "Dockerfile"
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    volumes:
      - ./test_mod_http_headers/php/src:/var/www/html/
    networks:
      - test-network

  # Apache container for the file module
  file:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_file/php/src:/var/www/html/

  # Apache container for the cookieflags module
  cookieflags:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_cookieflags/php/src:/var/www/html/

  # Apache container for the csp module
  csp:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_csp/php/src:/var/www/html/

  # Apache container for the csrf module
  csrf:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_csrf/php/src:/var/www/html/

  # Apache and Nginx container for the methods module
  # Apache hardly handle the CONNECT method so we need Nginx
  # as a proxy to filter methods and avoid complex Apache conf
  methods:
    image: nginx${NGINX_HASH}
    volumes:
      - ./test_mod_methods/nginx.template:/etc/nginx/templates/default.conf.template
    networks:
      - test-network
    <<: *healthcheck_web
    depends_on:
      apache-methods:
        condition: service_healthy

  apache-methods:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_methods/php/src:/var/www/html/

  # Apache container for the shellshock module
  shellshock:
    build:
      context: ./test_mod_shellshock
      dockerfile: Dockerfile
      args:
        HTTPD_HASH_TAG: ${HTTPD_HASH}
    networks:
      - test-network
    <<: *healthcheck_web

  # Apache container for the sql module
  sql:
    build:
      context: ./test_mod_sql/
      dockerfile: Dockerfile
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    volumes:
      - ./test_mod_sql/php/src/:/var/www/html/
    networks:
      - test-network

  # Apache container for the timesql module
  timesql:
    build:
      context: ./test_mod_timesql/
      dockerfile: Dockerfile.php
      args:
        - PHP_HASH_TAG=${PHP_HASH}
    environment:
      MYSQL_HOST: timesql-db
      MYSQL_DATABASE: ${TIMESQL_MYSQL_DATABASE}
      MYSQL_USER: ${TIMESQL_MYSQL_USER}
      MYSQL_PASSWORD: ${TIMESQL_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${TIMESQL_MYSQL_ROOT_PASSWORD}
    <<: *healthcheck_web
    depends_on:
      timesql-db:
        condition: service_healthy
    volumes:
      - ./test_mod_timesql/php/src/:/var/www/html/
    networks:
      - test-network

  # Wordpress container 
  wordpress:
    build:
      context: ./test_mod_wp_enum/
      dockerfile: Dockerfile
      args:
        WP_HASH_TAG: ${WP_HASH}
    healthcheck:
      test: ${DEFAULT_WEB_HEALTHCHECK_COMMAND}
      interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
      timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
      start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
      retries: 30
    depends_on:
      wp_db:
        condition: service_healthy
    restart: always
    environment:
      WORDPRESS_DB_HOST: wp_db:3306
      WORDPRESS_DB_USER: ${WP_MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${WP_MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${WP_MYSQL_DATABASE}
    networks:
      - test-network

  # Apache container for the xss module
  xss:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_xss/php/src:/var/www/html/

  # Apache container for the xxe module and its endpoint
  xxe:
    <<: [ *default_php_setup, *healthcheck_web ]
    depends_on:
      endpoint:
        condition: service_healthy
    volumes:
      - ./test_mod_xxe/php/src/:/var/www/html/

  # Custom endpoint for requests
  endpoint:
    build:
      context: ../../
      dockerfile: "tests/integration/endpoint/Dockerfile"
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    networks:
      - test-network
  # Apache container to test the auths methods for the crawler
  crawler_auth:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_crawler_auth/php/src:/var/www/html/

  # Wapiti container 
  # requires all the targets containers to work perfectly
  wapiti:
    build:
      context: "../../"
      dockerfile: "./tests/integration/wapiti/Dockerfile.integration"
      no_cache: true
    container_name: wapiti
    volumes:
      - ./.test:/home/
    networks:
      - test-network
    command: "${TESTS}"
    depends_on:
      backup:
        condition: service_healthy
      brute_login_form:
        condition: service_healthy
      exec:
        condition: service_healthy
      htaccess:
        condition: service_healthy
      http_headers:
        condition: service_healthy
      file:
        condition: service_healthy
      crlf:
        condition: service_healthy
      cookieflags:
        condition: service_healthy
      csp:
        condition: service_healthy
      csrf:
        condition: service_healthy
      wordpress:
        condition: service_healthy
      xss:
        condition: service_healthy
      xxe:
        condition: service_healthy
      sql:
        condition: service_healthy
      shellshock:
        condition: service_healthy
      methods:
        condition: service_healthy
      timesql:
        condition: service_healthy
      crawler_auth:
        condition: service_healthy

volumes:
  wp_db_data:
  timesql_db_data:
networks:
  test-network:
